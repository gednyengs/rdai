/* Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* Generated by Halide Compiler */
#include "rdai_clockwork_platform.h"
#include "clockwork_testscript.h"

/* Other includes */
#include "rdai_api.h"


// =================== HELPER FUNCTIONS =================================

/**
 * Construct an error status
 *
 * @param reason The reason for the error
 * @return The constructed error status
 */
 static RDAI_Status make_status_error( RDAI_ErrorReason reason = RDAI_REASON_UNIMPLEMENTED )
 {
     RDAI_Status status;
     status.status_code = RDAI_STATUS_ERROR;
     status.error_reason = reason;
     return status;
 }
 
 /**
  * Construct a success status
  *
  * @return The constructed success status
  */
 static RDAI_Status make_status_ok()
 {
     RDAI_Status status;
     status.status_code = RDAI_STATUS_OK;
     return status;
 }


// =================== Platform Ops Implementation ==============================
//
// See RDAI API documentation for the functionality of these APIs
//

static RDAI_MemObject * op_mem_allocate( RDAI_MemObjectType mem_object_type,
                                         size_t size,
                                         RDAI_Device *device )
{
    return NULL;
}


static RDAI_Status op_mem_free( RDAI_MemObject *mem_object )
{
    return make_status_error();
}

static RDAI_Status op_mem_copy( RDAI_MemObject *src, RDAI_MemObject *dest )
{
    return make_status_error();
}

static RDAI_Status op_mem_copy_async( RDAI_MemObject *src, RDAI_MemObject *dest )
{
    return make_status_error();
}

static RDAI_MemObject *op_mem_crop( RDAI_MemObject *src, size_t offset, size_t cropped_size )
{
    return NULL;
}

static RDAI_Status op_mem_free_crop( RDAI_MemObject *obj )
{
    return make_status_error();
}

static RDAI_Platform *op_platform_create( void )
{
     return &rdai_clockwork_platform;
}

static RDAI_Status op_platform_destroy( RDAI_Platform *platform )
{
    return make_status_ok();
}

static RDAI_Status op_platform_init( RDAI_Platform *platform, void *user_data )
{
    return make_status_error();
}

static RDAI_Status op_platform_deinit( RDAI_Platform *platform, void *user_data )
{
    return make_status_error();
}

static RDAI_Status op_device_init( RDAI_Device *device, void *user_data )
{
    return make_status_error();
}

static RDAI_Status op_device_deinit( RDAI_Device *device, void *user_data )
{
    return make_status_error();
}

static RDAI_Status op_device_run( RDAI_Device *device, RDAI_MemObject **mem_object_list )
{
    if( device && mem_object_list && mem_object_list[0] ) {
        run_clockwork_program( mem_object_list );
        return make_status_ok();
    }
    return make_status_error();
}

static RDAI_Status op_device_run_async( RDAI_Device *device, RDAI_MemObject **mem_object_list )
{
    return op_device_run( device, mem_object_list );
}

static RDAI_Status op_sync( RDAI_AsyncHandle *handle )
{
    if(handle && handle->platform) {
        return make_status_ok();
    }
    return make_status_error();
}

// ======================== PlatformOps ========================================

RDAI_PlatformOps rdai_clockwork_tb_ops = {
    .mem_allocate       = op_mem_allocate,
    .mem_free           = op_mem_free,
    .mem_copy           = op_mem_copy,
    .mem_copy_async     = op_mem_copy_async,
    .mem_crop           = op_mem_crop,
    .mem_free_crop      = op_mem_free_crop,
    .platform_create    = op_platform_create,
    .platform_destroy   = op_platform_destroy,
    .platform_init      = op_platform_init,
    .platform_deinit    = op_platform_deinit,
    .device_init        = op_device_init,
    .device_deinit      = op_device_deinit,
    .device_run         = op_device_run,
    .device_run_async   = op_device_run_async,
    .sync               = op_sync
};

