/* Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* Generated by Halide Compiler */
#include "rdai_clockwork_platform.h"
#include "clockwork_testscript.h"

/* Other includes */
#include "rdai_api.h"

#include <iostream>
#include <future>
#include <vector>
#include <string.h>

#include "HalideBuffer.h"
#include "halide_image_io.h"

using namespace Halide::Tools;
using namespace Halide::Runtime;
using namespace std;

static uint32_t hardware_id = 1;
static RDAI_ID urdai_id = {hardware_id};
static RDAI_VLNV urdai_vlnv;

static vector<future<RDAI_Status> > asyncStatuses;
static uint32_t async_id = 1;

// =================== HELPER FUNCTIONS =================================

/**
 * Construct an error status
 *
 * @param reason The reason for the error
 * @return The constructed error status
 */
static RDAI_Status make_status_error( RDAI_ErrorReason reason = RDAI_REASON_UNIMPLEMENTED )
{
    RDAI_Status status;
    status.status_code = RDAI_STATUS_ERROR;
    status.error_reason = reason;
    return status;
}

 /**
  * Construct an async status
  *
  * @return The constructed async status
  */
static RDAI_Status make_status_ok_async()
{
	RDAI_Status status;
	status.status_code = RDAI_STATUS_OK;
	status.async_handle.id.value = async_id;
	async_id++;	
    return status;
}

 /**
  * Construct a success status
  *
  * @return The constructed success status
  */
static RDAI_Status make_status_ok()
{
    RDAI_Status status;
    status.status_code = RDAI_STATUS_OK;
    return status;
}

// =================== Platform Ops Implementation ==============================
//
// See RDAI API documentation for the functionality of these APIs
//

static RDAI_MemObject *op_mem_allocate( RDAI_MemObjectType mem_object_type, 
										size_t size, 
										RDAI_Device *device )
{
	if (mem_object_type == RDAI_MEM_UNKNOWN) return NULL;

	RDAI_MemObject *memObject = (RDAI_MemObject *) malloc(sizeof(RDAI_MemObject));

	uint8_t *data = (uint8_t *) malloc(size);

	memObject->mem_type 	= mem_object_type;
	memObject->view_type 	= RDAI_VIEW_FULL;
	memObject->device 		= device;
	memObject->parent 		= NULL;
	memObject->host_ptr		= (mem_object_type == RDAI_MEM_HOST || 
							   mem_object_type == RDAI_MEM_SHARED)? data : NULL;
	memObject->device_ptr 	= NULL;
	memObject->size 		= size;

	// memObject->flags 		= 0;
	// memObject->user_tag 	= 0;

	return memObject;
}

static RDAI_Status op_mem_free( RDAI_MemObject *mem_object )
{
	free(mem_object->host_ptr);
	free(mem_object);
	return make_status_ok();
}

static RDAI_Status op_mem_copy( RDAI_MemObject *src, RDAI_MemObject *dest )
{
	dest->mem_type 		= src->mem_type;
	dest->view_type 	= src->view_type;
	dest->device 		= src->device;
	dest->parent		= src->parent;
	memcpy(dest->host_ptr, src->host_ptr, src->size);
	dest->device_ptr	= src->device_ptr;
	dest->size 			= src->size;
	return make_status_ok();
}

static RDAI_Status op_mem_copy_async( RDAI_MemObject *src, RDAI_MemObject *dest )
{
	asyncStatuses.push_back( async( op_mem_copy, src, dest ) );
	return make_status_ok_async();
}

static RDAI_MemObject* op_mem_crop( RDAI_MemObject *src, 
									size_t offset, 
									size_t cropped_size )
{
	RDAI_MemObject *croppedObject = (RDAI_MemObject *) malloc(sizeof(RDAI_MemObject));

	croppedObject->mem_type 	= src->mem_type;
	croppedObject->view_type 	= RDAI_VIEW_CROP;
	croppedObject->device 		= src->device;
	croppedObject->parent 		= src;
	croppedObject->host_ptr		= (src->host_ptr)+offset;
	croppedObject->device_ptr 	= (src->device_ptr == NULL)? NULL : (src->device_ptr)+offset;
	croppedObject->size 		= cropped_size;
	// croppedObject->flags 		= 0;
	// croppedObject->user_tag 	= 0;

	return croppedObject;
}

static RDAI_Status op_mem_free_crop( RDAI_MemObject *cropped_mem_object )
{
	free(cropped_mem_object);
	return make_status_ok();
}

static RDAI_Platform* op_platform_create( void )
{
	RDAI_Platform *platform = (RDAI_Platform *) malloc(sizeof(RDAI_Platform));

	RDAI_Device device = {urdai_id, urdai_vlnv, platform, NULL, 1};
	RDAI_Device *device_ptr = &device;
	RDAI_Device **device_list = (RDAI_Device **) malloc(sizeof(RDAI_Device));
	memcpy(device_list, &device_ptr, sizeof(RDAI_Device*));

	RDAI_Platform temp_platform = {RDAI_CLOCKWORK_PLATFORM, urdai_id, NULL, device_list};
			
	hardware_id++;

	memcpy(platform, &temp_platform, sizeof(RDAI_Platform));

	return platform;
}

static RDAI_Status op_platform_destroy( RDAI_Platform *platform )
{
	free(platform->device_list);
	free(platform);
	return make_status_ok();
}

static RDAI_Status op_platform_init( RDAI_Platform *platform, void *user_data )
{
	return make_status_error();
}

static RDAI_Status op_platform_deinit( RDAI_Platform *platform, void *user_data )
{
	return make_status_error();
}

static RDAI_Status op_device_init( RDAI_Device *device, void *user_data )
{
	return make_status_error();
}

static RDAI_Status op_device_deinit( RDAI_Device *device, void *user_data )
{
	return make_status_error();
}

static RDAI_Status op_device_run( RDAI_Device *device, 
								  RDAI_MemObject **mem_object_list )
{
	if( device && mem_object_list && mem_object_list[0] ) {
		run_clockwork_program(mem_object_list);

		Buffer<uint8_t> output(62, 62);
		memcpy(output.begin(), mem_object_list[1]->host_ptr, mem_object_list[1]->size);

		string output_filename = "output/output_conv_3_3.png";
		convert_and_save_image(output, output_filename);
		cout << "First pixel of output..." << endl;
		cout << (int) output(0, 0) << endl;	
		cout << "Ran " << "conv_3_3" << " on " << "clockwork" << "\n";
	}

	return make_status_ok();
}

static RDAI_Status op_device_run_async( RDAI_Device *device, 
										RDAI_MemObject **mem_object_list )
{
	asyncStatuses.push_back( async( op_device_run, device, mem_object_list ));
	return make_status_ok_async();
}

static RDAI_Status op_sync( RDAI_AsyncHandle *async_handle )
{
	if(async_handle && async_handle->platform) {
        return asyncStatuses[async_handle->id.value - 1].get();
    }
    return make_status_error();
	
}

// ======================== PlatformOps ========================================
#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

struct RDAI_PlatformOps rdai_clockwork_sim_ops = {
    .mem_allocate       = op_mem_allocate,
    .mem_free           = op_mem_free,
    .mem_copy           = op_mem_copy,
    .mem_copy_async     = op_mem_copy_async,
    .mem_crop           = op_mem_crop,
    .mem_free_crop      = op_mem_free_crop,
    .platform_create    = op_platform_create,
    .platform_destroy   = op_platform_destroy,
    .platform_init      = op_platform_init,
    .platform_deinit    = op_platform_deinit,
    .device_init        = op_device_init,
    .device_deinit      = op_device_deinit,
    .device_run         = op_device_run,
    .device_run_async   = op_device_run_async,
    .sync               = op_sync
};

#ifdef __cplusplus
}
#endif